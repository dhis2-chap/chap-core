[project]
name = "chap_core"
version = "1.0.9"
description = "Climate Health Analysis Platform (CHAP)"
readme = "README.md"
requires-python = ">=3.12"

authors = [{ name = "Sandvelab", email = "knutdrand@gmail.com" }]
license = { text = "AGPLv3 license" }
keywords = ["chap_core"]

dependencies = [
    "annotated_types",
    "bionumpy",
    "cyclopts",
    "diskcache",
    "docker",
    "earthengine-api==1.4.6",
    "fastapi",
    "sqlmodel",
    "psycopg2-binary",
    "geopandas",
    "geopy",
    "gitpython",
    "gluonts",
    "httpx",
    "libpysal",
    "matplotlib",
    "meteostat",
    "mlflow-skinny",
    "numpy",
    "pandas",
    "plotly",
    "pooch",
    "pycountry",
    "pydantic-geojson<2",
    "pydantic>=2.0",
    "python-dateutil",
    "python-dotenv",
    "python-multipart",
    "pyyaml",
    "requests",
    "rq",
    "scikit-learn",
    "scipy",
    "topojson",
    "unidecode",
    "uvicorn",
    "virtualenv",
    "xarray",
    "orjson>=3.10.7",
    "celery[pytest]",
    "packaging",
    "jsonschema",
    "altair"
]

[project.urls]
Homepage = "https://github.com/dhis2/chap-core"

[project.scripts]
chap = "chap_core.cli:main"
chap-cli = "chap_core.chap_cli:main"
chap-runner = "chap_core.models.model_rest_api_wrapper:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "build",
    "bump2version",
    "coverage>=7.6.2",
    "earthengine-api==1.4.6",
    "furo>=2024.8.6",
    "myst-parser>=4.0.0",
    "pre-commit>=4.0.1",
    "pytest<8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.6.9",
    "sphinx>=8.1.0",
    "virtualenv",
    "wheel>=0.44.0",
    "typer~=0.9.0",
]

[tool.ruff]
target-version = "py312"
line-length = 120
# Let Ruff discover both chap_core and tests for both "check" and "format"
include = ["chap_core/**/*.py", "tests/**/*.py"]
exclude = ["external_models/**"]

[tool.ruff.lint]
fixable = ["ALL"]

# Disable all linting in tests, but still allow formatting there.
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ALL"]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
log_cli = true
log_level = "DEBUG"
norecursedirs = [
    "tests/data_wrangling",
    "tests/spatio_temporal_data",
    "tests/",
    ".mypy_cache",
    "runs",
    "dist",
    "external_models"

]
filterwarnings = [
    "ignore::DeprecationWarning:plotly.io._kaleido",
    # Celery plugin is imported before pytest can rewrite it
    # This is expected behavior when using celery.contrib.pytest
    "ignore::pytest.PytestAssertRewriteWarning"
]
python_files = "test_*.py"
# Import mode to avoid other assertion rewriting issues
# Ignore specific test files that should not run
addopts = "--import-mode=importlib --ignore=tests/test_meteostat_wrapper"
